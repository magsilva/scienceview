/*
 * Copyright 2015 Aretha.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package topicevolutionvis.datamining.dataanalysis;

import gnu.trove.iterator.TIntObjectIterator;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import topicevolutionvis.database.Corpus;
import topicevolutionvis.graph.TemporalGraph;
import topicevolutionvis.graph.Vertex;
import topicevolutionvis.matrix.SparseMatrix;
import topicevolutionvis.matrix.SparseVector;
import topicevolutionvis.preprocessing.RepresentationFactory;
import topicevolutionvis.projection.ProjectionData;
import topicevolutionvis.projection.distance.Dissimilarity;
import topicevolutionvis.projection.distance.DissimilarityFactory;
import topicevolutionvis.projection.distance.DissimilarityType;
import topicevolutionvis.projection.distance.DistanceMatrix;
import topicevolutionvis.util.KNN;
import topicevolutionvis.util.Pair;
import topicevolutionvis.view.TemporalProjectionViewer;

/**
 *
 * @author Aretha
 */
public class NeighborhoodPreservationView extends javax.swing.JDialog {

    /**
     * Creates new form NeighborhoodPreservationView
     *
     * @param parent
     */
    private TemporalProjectionViewer projection_viewer = null;

    public NeighborhoodPreservationView(java.awt.Frame parent, TemporalProjectionViewer projection_viewer) {
        super(parent);
        initComponents();

        this.projection_viewer = projection_viewer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nrNeighborsTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Neighborhood Preservation");
        setMinimumSize(new java.awt.Dimension(214, 325));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Multidimensional Data"));
        jPanel1.setMinimumSize(new java.awt.Dimension(134, 30));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Number of neighbors:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(jLabel1, gridBagConstraints);

        nrNeighborsTextField.setColumns(10);
        nrNeighborsTextField.setText("30");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel3.add(nrNeighborsTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(closeButton, gridBagConstraints);

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel2.add(generateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private TreeMap<Integer, ArrayList<TemporalGraph>> getTemporalGraphs(TemporalProjectionViewer projection_viewer) {
        TreeMap<Integer, ArrayList<TemporalGraph>> graphs = projection_viewer.getTemporalProjection().getGraphs();
        for (Entry<Integer, ArrayList<TemporalGraph>> entry : graphs.entrySet()) {
            TemporalGraph graph = entry.getValue().get(entry.getValue().size() - 1);
            int number_of_vertex = graph.getVertex().size();
            SparseMatrix matrix = new SparseMatrix(number_of_vertex);
            ArrayList<String> attributes = new ArrayList<>();
            attributes.add("vertex-id");
            attributes.add("x");
            attributes.add("y");
            matrix.setAttributes(attributes);

            TIntObjectIterator<Vertex> iterator = graph.getVertex().iterator();

            while (iterator.hasNext()) {
                iterator.advance();
                Vertex v = iterator.value();
                double[] pos = {v.getId(), v.getX(), v.getY()};
                matrix.addRow(new SparseVector(pos));
            }
        }
        return graphs;
    }

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed

        try {
            // Representation of documents in a multi-dimensional space and representatio of the matrix of distances within the multi-dimensional space
            TreeMap<Integer, ArrayList<TemporalGraph>> graphs = this.getTemporalGraphs(projection_viewer);
            Corpus corpus = this.projection_viewer.getCorpus();
            ProjectionData pdata = projection_viewer.getProjectionData();
            SparseMatrix complete_matrix = RepresentationFactory.getInstance(pdata.getRepresentationType(), corpus).getMatrix(pdata);
            Dissimilarity diss = DissimilarityFactory.getInstance(DissimilarityType.EUCLIDEAN);
            DistanceMatrix distanceMatrix = new DistanceMatrix(complete_matrix, diss);

            // Quantity of neighbours required for by Neighborhood Preservation
            int maxneigh = Integer.parseInt(this.nrNeighborsTextField.getText());
            KNN knndata = new KNN(maxneigh);
            Pair[][] ndata = knndata.execute(distanceMatrix);

            NeighborhoodPreservation np = NeighborhoodPreservation.getInstance(this);
            np.createChart(ndata, graphs, maxneigh);
            
            
        } catch (IOException | NumberFormatException ex) {
            Logger.getLogger(NeighborhoodPreservationView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_generateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField nrNeighborsTextField;
    // End of variables declaration//GEN-END:variables
}
