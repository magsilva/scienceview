/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MultipleDocumentViewer.java
 *
 * Created on 04/05/2009, 15:09:44
 */
package topicevolutionvis.view;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.table.DefaultTableModel;

import topicevolutionvis.database.DatabaseCorpus;
import topicevolutionvis.matrix.SparseMatrix;
import topicevolutionvis.preprocessing.Ngram;

/**
 *
 * @author Aretha
 */
public class MultipleDocumentViewer extends javax.swing.JDialog {
    private static final long serialVersionUID = 1L;

    private int[] documents;
    private DocumentViewerPanel showedDocument = null;
    private DatabaseCorpus corpus;

    /** Creates new form MultipleDocumentViewer */
    public MultipleDocumentViewer(int[] documents, DatabaseCorpus corpus) {
        super(ScienceViewMainFrame.getInstance());
        initComponents();
        this.documents = documents;
        this.corpus = corpus;
        this.setLocationRelativeTo(ScienceViewMainFrame.getInstance());

    }

    private List<String> getHeader(List<Ngram> ngrams) {
    	List<String> errors = new ArrayList<String>();
    	for (int i = 0; i < ngrams.size(); i++) {
    		errors.add(ngrams.get(i).toString());
    	}
    	return errors;
    }
    
    public void display() {
        int id;
        double[] errorValue;
        double[] normalizedValue;
        String title;
        DocumentViewerPanel documentViewerPanel;
        SparseMatrix sm;
        SparseMatrix normalizedSm;
        try {
			sm = corpus.getCorpusSparseMatrix();
			normalizedSm = corpus.getNormalizedSm();
		} catch (IOException e) {
			throw new RuntimeException("Error when getting data to display document", e);
		}
        errorValue = new double[sm.getDimensions()];
        normalizedValue = new double[sm.getDimensions()];
        
        for (int i = 0; i < documents.length; i++) {
            List<Ngram> ngrams = corpus.getNgrams(documents[i]);
       		List<String> errorTypes = getHeader(ngrams);
            id = documents[i];
            title = corpus.getTitle(id);
            String[] columnsName = new String[] {"Error", "Quantity", "Normalized"};
            DefaultTableModel model = new DefaultTableModel(errorValue.length, 3) {
    			public Class getColumnClass(int column) {
    				if (column == 0) {
    					return String.class;
    				} else {
    					return Double.class;
    				}
    			}
    		};
   			model.setColumnIdentifiers(columnsName);
    		
   			System.out.println(sm);
    		documentViewerPanel = new DocumentViewerPanel(title, corpus.getAbstract(id), corpus.getYear(id), corpus.getDOI(id), corpus.getKeywords(id), model);
            for (int j = 0; j < ngrams.size(); j++) {
            	errorValue[j] = sm.getValueWithId(sm.getIndexWithId(id), j);
            	normalizedValue[j] = normalizedSm.getValueWithId(normalizedSm.getIndexWithId(id), j);
            }
    		
       		documentViewerPanel.insertTypesTable(errorTypes.toArray(new String[errorTypes.size()]));
            documentViewerPanel.insertErrorsTable(errorValue);
            documentViewerPanel.insertNormalizedTable(normalizedValue);
            documentViewerPanel.sortTable();
            int size_title = title.length();
            if (size_title > 20) {
                title = title.substring(0, 20) + "...";
            }
            fileviewTabbedPane.add(title, documentViewerPanel);
            fileviewTabbedPane.setTabComponentAt(i, new ButtonTabComponent(this, fileviewTabbedPane));
        }
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileviewTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        highlightTextField = new javax.swing.JTextField();
        higthlightButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Documents Viewer");

        fileviewTabbedPane.setMinimumSize(new java.awt.Dimension(1000, 500));
        fileviewTabbedPane.setPreferredSize(new java.awt.Dimension(800, 500));
        fileviewTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fileviewTabbedPaneStateChanged(evt);
            }
        });
        getContentPane().add(fileviewTabbedPane, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Highlight:");
        jPanel1.add(jLabel1);

        highlightTextField.setColumns(20);
        highlightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                highlightTextFieldKeyPressed(evt);
            }
        });
        jPanel1.add(highlightTextField);

        higthlightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Bookmarks16.gif"))); // NOI18N
        higthlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                higthlightButtonActionPerformed(evt);
            }
        });
        jPanel1.add(higthlightButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void higthlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_higthlightButtonActionPerformed
        if (this.showedDocument != null && this.highlightTextField.getText().trim().length() > 0) {
            this.showedDocument.highlight(this.highlightTextField.getText().trim());
        }
    }//GEN-LAST:event_higthlightButtonActionPerformed

    private void fileviewTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fileviewTabbedPaneStateChanged
        this.showedDocument = (DocumentViewerPanel) this.fileviewTabbedPane.getSelectedComponent();
        if (this.showedDocument != null && this.highlightTextField.getText().trim().length() > 0) {
            this.showedDocument.highlight(this.highlightTextField.getText().trim());
        }
    }//GEN-LAST:event_fileviewTabbedPaneStateChanged

    private void highlightTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_highlightTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER && this.showedDocument != null && this.highlightTextField.getText().trim().length() > 0) {
            this.showedDocument.highlight(this.highlightTextField.getText().trim());
        }
    }//GEN-LAST:event_highlightTextFieldKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane fileviewTabbedPane;
    private javax.swing.JTextField highlightTextField;
    private javax.swing.JButton higthlightButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
